'use client'

import { useAuth } from '@/contexts/AuthContext'
import { useEffect, useState, use } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import { ArrowLeft, Plus, Edit, Trash2, FolderPlus, X } from 'lucide-react'
import { SectionForm } from '@/components/sections/SectionForm'

interface Session {
  id: string
  title: string
  description: string | null
  videoUrl: string
  duration: number | null
  order: number
  isPublished: boolean
  sectionId: string | null
}

interface BatchDetails {
  id: string
  courseId: string
  title: string
}

interface Section {
  id: string
  title: string
  order: number
}

export default function BatchSessionsPage({ params }: { params: Promise<{ id: string }> }) {
  const { user, loading } = useAuth()
  const resolvedParams = use(params)
  const batchId = resolvedParams.id
  
  const [sessions, setSessions] = useState<Session[]>([])
  const [sections, setSections] = useState<Section[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [showSectionForm, setShowSectionForm] = useState(false)
  const [editingSection, setEditingSection] = useState<Section | null>(null)
  const [batchDetails, setBatchDetails] = useState<BatchDetails | null>(null)

  useEffect(() => {
    if (user && batchId) {
      fetchBatchDetails()
      fetchSessions()
      fetchSections()
    }
  }, [user, batchId])

  const fetchBatchDetails = async () => {
    try {
      const response = await fetch(`/api/batches/${batchId}`)
      if (response.ok) {
        const data = await response.json()
        setBatchDetails(data)
      }
    } catch (error) {
      console.error('Failed to fetch batch details:', error)
    }
  }

  const fetchSections = async () => {
    try {
      const response = await fetch(`/api/batches/${batchId}/sections`)
      if (response.ok) {
        const data = await response.json()
        setSections(data)
      }
    } catch (error) {
      console.error('Failed to fetch sections:', error)
    }
  }
  
  const [sessions, setSessions] = useState<Session[]>([])
  const [sections, setSections] = useState<any[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [showSectionForm, setShowSectionForm] = useState(false)
  const [editingSection, setEditingSection] = useState<any>(null)
  const [batchDetails, setBatchDetails] = useState<BatchDetails | null>(null)

  useEffect(() => {
    if (user && batchId) {
      fetchBatchDetails()
      fetchSessions()
      fetchSections()
    }
  }, [user, batchId])

  const fetchBatchDetails = async () => {
    try {
      const response = await fetch(`/api/batches/${batchId}`)
      if (response.ok) {
        const data = await response.json()
        setBatchDetails(data)
      }
    } catch (error) {
      console.error('Failed to fetch batch details:', error)
    }
  }

  const fetchSections = async () => {
    try {
      const response = await fetch(`/api/batches/${batchId}/sections`)
      if (response.ok) {
        const data = await response.json()
        setSections(data)
      }
    } catch (error) {
      console.error('Failed to fetch sections:', error)
    }
  }

  // Get batch details including courseId
  const [batchDetails, setBatchDetails] = useState<{ courseId: string } | null>(null)

  const fetchBatchDetails = async () => {
    try {
      const response = await fetch(`/api/batches/${batchId}`)
      if (response.ok) {
        const data = await response.json()
        setBatchDetails(data)
      }
    } catch (error) {
      console.error('Failed to fetch batch details:', error)
    }
  }

  useEffect(() => {
    if (batchId) {
      fetchBatchDetails()
    }
  }, [batchId])

  const fetchSessions = async () => {
    try {
      const response = await fetch(`/api/sessions?batchId=${batchId}`)
      if (response.ok) {
        const data = await response.json()
        // Filter out sessions that have empty string or null sectionId
        setSessions(data.map((session: Session) => ({
          ...session,
          sectionId: session.sectionId || null
        })))
      }
    } catch (error) {
      console.error('Failed to fetch sessions:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleDelete = async (sessionId: string) => {
    if (!confirm('Are you sure you want to delete this session?')) return

    try {
      const response = await fetch(`/api/sessions/${sessionId}`, {
        method: 'DELETE'
      })

      if (response.ok) {
        setSessions(sessions.filter(session => session.id !== sessionId))
      }
    } catch (error) {
      console.error('Failed to delete session:', error)
    }
  }

  if (loading || isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Access Denied</h1>
          <p className="text-gray-600 mb-8">Please log in to view sessions.</p>
          <Link
            href="/login"
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
          >
            Login
          </Link>
        </div>
      </div>
    )
  }

  const isAdmin = user.role === 'ADMIN' || user.role === 'INSTRUCTOR'

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Access Denied</h1>
          <p className="text-gray-600 mb-8">You don&apos;t have permission to view sessions.</p>
          <Link
            href="/dashboard"
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
          >
            Back to Dashboard
          </Link>
        </div>
      </div>
    )
  }

  // Function to check if a session belongs to a section
  const hasSection = (sessionId: string) => {
    return sections.some(section => {
      const sessionIds = sessions
        .filter(s => s.sectionId === section.id)
        .map(s => s.id)
      return sessionIds.includes(sessionId)
    })
  }

  // Function to get sessions not belonging to any section
  const getUncategorizedSessions = () => {
    return sessions.filter(session => !hasSection(session.id))
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <Link
            href={`/batches/${batchId}`}
            className="inline-flex items-center text-blue-600 hover:text-blue-700 mb-4"
          >
            <ArrowLeft className="h-5 w-5 mr-2" />
            Back to Batch
          </Link>
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Batch Sessions</h1>
              <p className="text-gray-600 mt-2">Manage video sessions for this batch</p>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setShowSectionForm(true)}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
              >
                <Plus className="h-5 w-5 mr-2" />
                Add Section
              </button>
              <Link
                href={`/batches/${batchId}/sessions/new`}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors flex items-center"
              >
                <Plus className="h-5 w-5 mr-2" />
                Add Session
              </Link>
            </div>
          </div>
        </div>

        {/* Session Form Dialog */}
        {showSectionForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">
                  {editingSection ? 'Edit Section' : 'Add New Section'}
                </h2>
                <button
                  onClick={() => {
                    setShowSectionForm(false)
                    setEditingSection(null)
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>
              {batchDetails?.courseId ? (
                <SectionForm
                  batchId={batchId}
                  courseId={batchDetails.courseId}
                  initialData={editingSection}
                  onSuccess={() => {
                    setShowSectionForm(false)
                    setEditingSection(null)
                    fetchSections()
                  }}
                  onCancel={() => {
                    setShowSectionForm(false)
                    setEditingSection(null)
                  }}
                />
              ) : (
                <div className="text-center py-4">Loading...</div>
              )}
            </div>
          </div>
        )}

        {/* Main Content */}
        <div className="space-y-8">
          {sessions.length === 0 ? (
            <div className="bg-white rounded-lg shadow-md">
              <div className="text-center py-12">
                <h3 className="text-lg font-medium text-gray-900 mb-2">No sessions yet</h3>
                <p className="text-gray-600 mb-8">Add sections and video sessions to this batch.</p>
                <div className="flex items-center justify-center space-x-4">
                  <button
                    onClick={() => setShowSectionForm(true)}
                    className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors inline-flex items-center"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Section
                  </button>
                  <Link
                    href={`/batches/${batchId}/sessions/new`}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors inline-flex items-center"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Session
                  </Link>
                </div>
              </div>
            </div>
          ) : (
            <>
              {sections.length > 0 ? (
                // Show sections with their sessions
                sections.map((section) => (
                  <div key={section.id} className="bg-white rounded-lg shadow-lg border border-gray-200">
                    <div className="p-4 border-b border-gray-200 flex items-center justify-between">
                      <h3 className="text-lg font-medium text-gray-900">{section.title}</h3>
                      <div className="flex items-center space-x-3">
                        <Link
                          href={`/batches/${batchId}/sessions/new?sectionId=${section.id}`}
                          className="inline-flex items-center text-sm text-blue-600 hover:text-blue-700"
                        >
                          <Plus className="h-4 w-4 mr-1" />
                          Add Session
                        </Link>
                        <button
                          onClick={() => {
                            setEditingSection(section)
                            setShowSectionForm(true)
                          }}
                          className="text-gray-600 hover:text-gray-700"
                        >
                          <Edit className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                    <div className="divide-y divide-gray-100">
                      {sessions
                        .filter(session => session.sectionId === section.id)
                        .sort((a, b) => a.order - b.order)
                        .map(session => (
                          <div key={session.id} className="p-4 hover:bg-gray-50">
                            <div className="flex items-center justify-between">
                              <div>
                                <h4 className="font-medium text-gray-900">{session.title}</h4>
                                {session.description && (
                                  <p className="text-sm text-gray-500 mt-1">{session.description}</p>
                                )}
                                {session.duration && (
                                  <span className="text-xs text-gray-500 mt-1 block">
                                    Duration: {session.duration} minutes
                                  </span>
                                )}
                              </div>
                              <div className="flex items-center space-x-2">
                                <Link
                                  href={`/batches/${batchId}/sessions/${session.id}/edit`}
                                  className="text-blue-600 hover:text-blue-700"
                                >
                                  <Edit className="h-4 w-4" />
                                </Link>
                                <button
                                  onClick={() => handleDelete(session.id)}
                                  className="text-red-600 hover:text-red-700"
                                >
                                  <Trash2 className="h-4 w-4" />
                                </button>
                              </div>
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                ))
              ) : (
                // Show all sessions in one list when no sections exist
                <div className="bg-white rounded-lg shadow-lg border border-gray-200">
                  <div className="p-4 border-b border-gray-200">
                    <h3 className="text-lg font-medium text-gray-900">All Sessions</h3>
                  </div>
                  <div className="divide-y divide-gray-100">
                    {sessions
                      .sort((a, b) => a.order - b.order)
                      .map(session => (
                        <div key={session.id} className="p-4 hover:bg-gray-50">
                          <div className="flex items-center justify-between">
                            <div>
                              <h4 className="font-medium text-gray-900">{session.title}</h4>
                              {session.description && (
                                <p className="text-sm text-gray-500 mt-1">{session.description}</p>
                              )}
                              {session.duration && (
                                <span className="text-xs text-gray-500 mt-1 block">
                                  Duration: {session.duration} minutes
                                </span>
                              )}
                            </div>
                            <div className="flex items-center space-x-2">
                              <Link
                                href={`/batches/${batchId}/sessions/${session.id}/edit`}
                                className="text-blue-600 hover:text-blue-700"
                              >
                                <Edit className="h-4 w-4" />
                              </Link>
                              <button
                                onClick={() => handleDelete(session.id)}
                                className="text-red-600 hover:text-red-700"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              )}
            </>
          )}

          {/* Add Section button */}
          {!showSectionForm && (
            <div className="bg-white rounded-lg border-2 border-dashed border-gray-300 p-8 text-center">
              <div className="flex flex-col items-center justify-center">
                <Plus className="h-8 w-8 text-gray-400 mb-3" />
                <h3 className="text-lg font-medium text-gray-900 mb-1">Add new section</h3>
                <p className="text-sm text-gray-500 mb-4">Organize your sessions into sections</p>
                <button
                  onClick={() => setShowSectionForm(true)}
                  className="bg-white text-blue-600 border border-blue-600 hover:bg-blue-50 px-4 py-2 rounded-lg font-semibold transition-colors inline-flex items-center"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Section
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
          {/* Show section form dialog */}
          {showSectionForm && batchDetails && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
              <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-semibold">
                    {editingSection ? 'Edit Section' : 'Add New Section'}
                  </h2>
                  <button
                    onClick={() => {
                      setShowSectionForm(false)
                      setEditingSection(null)
                    }}
                    className="text-gray-400 hover:text-gray-500"
                  >
                    <X className="h-5 w-5" />
                  </button>
                </div>
                <SectionForm
                  batchId={batchId}
                  courseId={batchDetails.courseId}
                  initialData={editingSection}
                  onSuccess={() => {
                    setShowSectionForm(false)
                    setEditingSection(null)
                    fetchSections()
                  }}
                  onCancel={() => {
                    setShowSectionForm(false)
                    setEditingSection(null)
                  }}
                />
              </div>
            </div>
          )}

          {/* Show empty state if no sessions */}
          {sessions.length === 0 ? (
            <div className="bg-white rounded-lg shadow-md">
              <div className="text-center py-12">
                <h3 className="text-lg font-medium text-gray-900 mb-2">No sessions yet</h3>
                <p className="text-gray-600 mb-8">Add sections and video sessions to this batch.</p>
                <div className="flex items-center justify-center space-x-4">
                  <button
                    onClick={() => setShowSectionForm(true)}
                    className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors inline-flex items-center"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Section
                  </button>
                  <Link
                    href={`/batches/${batchId}/sessions/new`}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors inline-flex items-center"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Session
                  </Link>
                </div>
              </div>
            </div>
          ) : (
            <>
              {/* Show sections */}
              {sections.map((section) => (
                <div key={section.id} className="bg-white rounded-lg shadow-lg border border-gray-200">
                  <div className="p-4 border-b border-gray-200 flex items-center justify-between">
                    <h3 className="text-lg font-medium text-gray-900">{section.title}</h3>
                    <div className="flex items-center space-x-3">
                      <Link
                        href={`/batches/${batchId}/sessions/new?sectionId=${section.id}`}
                        className="inline-flex items-center text-sm text-blue-600 hover:text-blue-700"
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Session
                      </Link>
                      <button
                        onClick={() => {
                          setEditingSection(section)
                          setShowSectionForm(true)
                        }}
                        className="text-gray-600 hover:text-gray-700"
                      >
                        <Edit className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  <div className="divide-y divide-gray-100">
                    {sessions.filter(session => session.sectionId === section.id)
                      .sort((a, b) => a.order - b.order)
                      .map(session => (
                        <div key={session.id} className="p-4 hover:bg-gray-50">
                          <div className="flex items-center justify-between">
                            <div>
                              <h4 className="font-medium text-gray-900">{session.title}</h4>
                              {session.description && (
                                <p className="text-sm text-gray-500 mt-1">{session.description}</p>
                              )}
                              {session.duration && (
                                <span className="text-xs text-gray-500 mt-1 block">
                                  Duration: {session.duration} minutes
                                </span>
                              )}
                            </div>
                            <div className="flex items-center space-x-2">
                              <Link
                                href={`/batches/${batchId}/sessions/${session.id}/edit`}
                                className="text-blue-600 hover:text-blue-700"
                              >
                                <Edit className="h-4 w-4" />
                              </Link>
                              <button
                                onClick={() => handleDelete(session.id)}
                                className="text-red-600 hover:text-red-700"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              ))}

              {/* Show uncategorized sessions only when there are no sections */}
              {sections.length === 0 && (
                <div className="bg-white rounded-lg shadow-lg border border-gray-200">
                  <div className="p-4 border-b border-gray-200">
                    <h3 className="text-lg font-medium text-gray-900">All Sessions</h3>
                  </div>
                  <div className="divide-y divide-gray-100">
                    {sessions
                      .sort((a, b) => a.order - b.order)
                      .map(session => (
                        <div key={session.id} className="p-4 hover:bg-gray-50">
                          <div className="flex items-center justify-between">
                            <div>
                              <h4 className="font-medium text-gray-900">{session.title}</h4>
                              {session.description && (
                                <p className="text-sm text-gray-500 mt-1">{session.description}</p>
                              )}
                              {session.duration && (
                                <span className="text-xs text-gray-500 mt-1 block">
                                  Duration: {session.duration} minutes
                                </span>
                              )}
                            </div>
                            <div className="flex items-center space-x-2">
                              <Link
                                href={`/batches/${batchId}/sessions/${session.id}/edit`}
                                className="text-blue-600 hover:text-blue-700"
                              >
                                <Edit className="h-4 w-4" />
                              </Link>
                              <button
                                onClick={() => handleDelete(session.id)}
                                className="text-red-600 hover:text-red-700"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              )}
            </>
          )}

          {/* Section form dialog */}
          {showSectionForm && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
              <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-semibold">
                    {editingSection ? 'Edit Section' : 'Add New Section'}
                  </h2>
                  <button
                    onClick={() => {
                      setShowSectionForm(false)
                      setEditingSection(null)
                    }}
                    className="text-gray-400 hover:text-gray-500"
                  >
                    <X className="h-5 w-5" />
                  </button>
                </div>
                {batchDetails?.courseId ? (
                  <SectionForm
                    batchId={batchId}
                    courseId={batchDetails.courseId}
                    initialData={editingSection}
                    onSuccess={() => {
                      setShowSectionForm(false)
                      setEditingSection(null)
                      fetchSections()
                    }}
                    onCancel={() => {
                      setShowSectionForm(false)
                      setEditingSection(null)
                    }}
                  />
                ) : (
                  <div className="text-center py-4">Loading...</div>
                )}
              </div>
            </div>
          )}

          {/* Main content */}
          {sessions.length > 0 ? (
            <>
          {/* If no sections exist, show all sessions in one list */}
          {sections.length === 0 ? (
            sessions.length > 0 && (
              <div className="bg-white rounded-lg shadow-lg border border-gray-200">
                <div className="p-4 border-b border-gray-200">
                  <h3 className="text-lg font-medium text-gray-900">Sessions</h3>
                </div>
                <div className="divide-y divide-gray-100">
                  {sessions
                    .sort((a, b) => a.order - b.order)
                    .map(session => (
                      <div key={session.id} className="p-4 hover:bg-gray-50">
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="font-medium text-gray-900">{session.title}</h4>
                            {session.description && (
                              <p className="text-sm text-gray-500 mt-1">{session.description}</p>
                            )}
                            {session.duration && (
                              <span className="text-xs text-gray-500 mt-1 block">
                                Duration: {session.duration} minutes
                              </span>
                            )}
                          </div>
                          <div className="flex items-center space-x-2">
                            <Link
                              href={`/batches/${batchId}/sessions/${session.id}/edit`}
                              className="text-blue-600 hover:text-blue-700"
                            >
                              <Edit className="h-4 w-4" />
                            </Link>
                            <button
                              onClick={() => handleDelete(session.id)}
                              className="text-red-600 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            )
          ) : (
            // If sections exist, show them with their sessions
            sections.map((section) => (
              <div key={section.id} className="bg-white rounded-lg shadow-lg border border-gray-200">
                <div className="p-4 border-b border-gray-200 flex items-center justify-between">
                  <h3 className="text-lg font-medium text-gray-900">{section.title}</h3>
                    <div className="flex items-center space-x-3">
                      <Link
                        href={`/batches/${batchId}/sessions/new?sectionId=${section.id}`}
                        className="inline-flex items-center text-sm text-blue-600 hover:text-blue-700"
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Session
                      </Link>
                      <button
                        onClick={() => {
                          setEditingSection(section)
                          setShowSectionForm(true)
                        }}
                        className="text-gray-600 hover:text-gray-700"
                      >
                        <Edit className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  <div className="divide-y divide-gray-100">
                    {sessions.filter(session => session.sectionId === section.id)
                      .sort((a, b) => a.order - b.order)
                      .map(session => (
                        <div key={session.id} className="p-4 hover:bg-gray-50">
                          <div className="flex items-center justify-between">
                            <div>
                              <h4 className="font-medium text-gray-900">{session.title}</h4>
                              {session.description && (
                                <p className="text-sm text-gray-500 mt-1">{session.description}</p>
                              )}
                              {session.duration && (
                                <span className="text-xs text-gray-500 mt-1 block">
                                  Duration: {session.duration} minutes
                                </span>
                              )}
                              {!session.isPublished && (
                                <span className="inline-block mt-1 text-xs bg-yellow-100 text-yellow-800 px-2 py-0.5 rounded-full">
                                  Draft
                                </span>
                              )}
                            </div>
                            <div className="flex items-center space-x-2">
                              <Link
                                href={`/batches/${batchId}/sessions/${session.id}/edit`}
                                className="text-blue-600 hover:text-blue-700"
                              >
                                <Edit className="h-4 w-4" />
                              </Link>
                              <button
                                onClick={() => handleDelete(session.id)}
                                className="text-red-600 hover:text-red-700"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              ))}

              {/* Show sections */}
              {sections.map((section) => (
                <div key={section.id} className="bg-white rounded-lg shadow-lg border border-gray-200">
                  <div className="p-4 border-b border-gray-200 flex items-center justify-between">
                    <h3 className="text-lg font-medium text-gray-900">{section.title}</h3>
                    <div className="flex items-center space-x-3">
                      <Link
                        href={`/batches/${batchId}/sessions/new?sectionId=${section.id}`}
                        className="inline-flex items-center text-sm text-blue-600 hover:text-blue-700"
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Session
                      </Link>
                      <button
                        onClick={() => {
                          setEditingSection(section)
                          setShowSectionForm(true)
                        }}
                        className="text-gray-600 hover:text-gray-700"
                      >
                        <Edit className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  <div className="divide-y divide-gray-100">
                    {sessions
                      .filter(session => session.sectionId === section.id)
                      .sort((a, b) => a.order - b.order)
                      .map(session => (
                    <div key={session.id} className="p-4 hover:bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">{session.title}</h4>
                          {session.description && (
                            <p className="text-sm text-gray-500 mt-1">{session.description}</p>
                          )}
                          {session.duration && (
                            <span className="text-xs text-gray-500 mt-1 block">
                              Duration: {session.duration} minutes
                            </span>
                          )}
                        </div>
                        <div className="flex items-center space-x-2">
                          <Link
                            href={`/batches/${batchId}/sessions/${session.id}/edit`}
                            className="text-blue-600 hover:text-blue-700"
                          >
                            <Edit className="h-4 w-4" />
                          </Link>
                          <button
                            onClick={() => handleDelete(session.id)}
                            className="text-red-600 hover:text-red-700"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          )}

          {showSectionForm ? (
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">{editingSection ? 'Edit Section' : 'Add New Section'}</h3>
                <button
                  onClick={() => {
                    setShowSectionForm(false)
                    setEditingSection(null)
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>
              {batchDetails?.courseId ? (
                <SectionForm
                  batchId={batchId}
                  courseId={batchDetails.courseId}
                  initialData={editingSection}
                  onSuccess={() => {
                    setShowSectionForm(false)
                    setEditingSection(null)
                    fetchSections()
                  }}
                  onCancel={() => {
                    setShowSectionForm(false)
                    setEditingSection(null)
                  }}
                />
              ) : (
                <div className="text-center text-gray-500">Loading...</div>
              )}
            </div>
          ) : (
            <div className="bg-white rounded-lg border-2 border-dashed border-gray-300 p-8 text-center">
              <div className="flex flex-col items-center justify-center">
                <Plus className="h-8 w-8 text-gray-400 mb-3" />
                <h3 className="text-lg font-medium text-gray-900 mb-1">Add new section</h3>
                <p className="text-sm text-gray-500 mb-4">Organize your sessions into sections</p>
                <button
                  onClick={() => setShowSectionForm(true)}
                  className="bg-white text-blue-600 border border-blue-600 hover:bg-blue-50 px-4 py-2 rounded-lg font-semibold transition-colors inline-flex items-center"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Section
                </button>
              </div>
            </div>
          )}
        </div>

        {sessions.length === 0 && (
          <div className="bg-white rounded-lg shadow-md">
            <div className="text-center py-12">
              <h3 className="text-lg font-medium text-gray-900 mb-2">No sessions yet</h3>
              <p className="text-gray-600 mb-8">Add video sessions to this batch.</p>
              <Link
                href={`/batches/${batchId}/sessions/new`}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
              >
                Add First Session
              </Link>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
