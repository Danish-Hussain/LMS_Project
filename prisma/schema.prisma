// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// This will set up seeding
generator seed {
  provider = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String
  role          Role     @default(STUDENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  enrollments    Enrollment[]
  batches        Batch[]      @relation("BatchStudents")
  createdCourses Course[]     @relation("CourseCreator")
  progress       Progress[]
  payments       Payment[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  price       Float?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String

  // Relations
  creator     User          @relation("CourseCreator", fields: [creatorId], references: [id])
  sessions    Session[]
  enrollments Enrollment[]
  batches     Batch[]
  payments    Payment[]

  @@map("courses")
}

model Session {
  id          String    @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  duration    Int?      // in minutes
  startTime   DateTime?
  endTime     DateTime?
  order       Int
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courseId    String
  batchId     String

  // Relations
  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  batch       Batch             @relation(fields: [batchId], references: [id], onDelete: Cascade)
  progress    Progress[]
  documents   SessionDocument[]

  @@map("sessions")
}

model SessionDocument {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessionId String

  // Relations
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_documents")
}

model Batch {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courseId    String

  // Relations
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  students    User[]      @relation("BatchStudents")
  sessions    Session[]
  enrollments Enrollment[]

  @@map("batches")
}

model Enrollment {
  id        String          @id @default(cuid())
  userId    String
  courseId  String
  batchId   String
  status    EnrollmentStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  batch     Batch     @relation(fields: [batchId], references: [id], onDelete: Cascade)
  payments  Payment[]

  @@map("enrollments")
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String
  watchedTime Int      @default(0)  // in seconds
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("progress")
}

model Payment {
  id           String       @id @default(cuid())
  amount       Float
  currency     String       @default("USD")
  status       PaymentStatus @default(PENDING)
  method       String?
  userId       String
  courseId     String
  enrollmentId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
