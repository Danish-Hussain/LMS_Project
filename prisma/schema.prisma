generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  password       String
  tokenVersion   Int          @default(0)
  role           Role         @default("STUDENT")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  enrollments    Enrollment[]
  createdCourses Course[]     @relation("CourseCreator")
  payments       Payment[]
  progress       Progress[]
  batches        Batch[]      @relation("BatchStudents")

  @@map("users")
}

model Course {
  id          String          @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  price       Float?
  isPublished Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  creatorId   String
  enrollments Enrollment[]
  batches     Batch[]
  sections    CourseSection[]
  creator     User            @relation("CourseCreator", fields: [creatorId], references: [id])
  payments    Payment[]
  sessions    Session[]

  @@map("courses")
}

model CourseSection {
  id          String    @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  batchId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  batch       Batch     @relation(fields: [batchId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sessions    Session[]

  @@map("course_sections")
}

model Session {
  id          String         @id @default(cuid())
  title       String
  videoUrl    String
  startTime   DateTime?
  endTime     DateTime?
  order       Int
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  courseId    String
  batchId     String
  sectionId   String?
  progress    Progress[]
  section     CourseSection? @relation(fields: [sectionId], references: [id])
  batch       Batch          @relation(fields: [batchId], references: [id], onDelete: Cascade)
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Batch {
  id          String          @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  courseId    String
  enrollments Enrollment[]
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sections    CourseSection[]
  sessions    Session[]
  students    User[]          @relation("BatchStudents")

  @@map("batches")
}

model Enrollment {
  id        String           @id @default(cuid())
  userId    String
  courseId  String
  batchId   String?
  status    EnrollmentStatus @default("PENDING")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  batch     Batch?           @relation(fields: [batchId], references: [id], onDelete: Cascade)
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments  Payment[]

  @@index([userId])
  @@index([courseId])
  @@index([batchId])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("progress")
}

model Payment {
  id           String        @id @default(cuid())
  amount       Float
  currency     String        @default("USD")
  status       PaymentStatus @default("PENDING")
  method       String?
  userId       String
  courseId     String
  enrollmentId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
